plugins {
    id 'java'
}

version '1.0'
compileJava {
	sourceCompatibility = '1.8'
	targetCompatibility = '1.8'
}



repositories {
    mavenCentral()
    jcenter()
}



dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.4.0-M1"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.4.0"
    compile group: 'javax.mail', name: 'mail', version: '1.4.5'
    compile group: 'javax.activation', name: 'activation', version: '1.1.1'
    compile group: 'org.imgscalr', name: 'imgscalr-lib', version: '4.2'
    compile group: 'net.coobird', name: 'thumbnailator', version: '0.4.1'

    compile group:'org.xerial', name:'sqlite-jdbc', version:'3.8.11.2'
}

jar {
    manifest {
        if (!configurations.compile.isEmpty()){
            attributes(
                    'Class-Path': configurations.compile.collect{it.toURI().toString()}.join(' '),
                    'Main-Class': 'com.pc.Flow')
        }
    }
    archiveName 'all-pc.jar'
    destinationDirectory = file('.')
//    from ('src/main/resources'){
//        include 'config.properties'
//    }
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }
}
//
//sourceSets {
//    main {
//        java {
//            srcDir 'src'
//        }
//    }
//}

/*
task cliJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Command Line Interface for VisualCrypto',
                'Implementation-Version': version,
                'Main-Class': 'com.pc.cli.EncodeDecodeCLI'
    }
    baseName = 'CLI'
    from ('src/main/resources') {
        include 'config.properties'
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task cli(dependsOn: cliJar, type: Copy){
    from "build/libs/"
    into "/jars"
    include '*.jar'
}


task flowJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': version,
                'Main-Class': 'com.pc'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
*/


